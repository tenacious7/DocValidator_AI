version: '3.8'

services:
  # Development environment
  ai-document-validator-dev:
    build:
      context: .
      target: development
    ports:
      - "3001:3001"
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - CORS_ORIGIN=http://localhost:5173
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
    restart: unless-stopped
    profiles:
      - dev

  # Production environment
  ai-document-validator:
    build:
      context: .
      target: production
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=warn
      - CORS_ORIGIN=https://yourdomain.com
    volumes:
      - uploads_data:/app/uploads
      - temp_data:/app/temp
      - logs_data:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    profiles:
      - prod

  # Redis for caching (production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - prod

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ai-document-validator
    restart: unless-stopped
    profiles:
      - prod

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  uploads_data:
  temp_data:
  logs_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge